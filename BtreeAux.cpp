#include <fstream>

struct BtreeNode
{
     int numberOfKey; //number of key to be used by certain operation
     int nodeKey[199]; //array with the keys contained by the node
     int seek[200]; //positions inside of a node
     int ownReference; //reference to own node for memeory purposes
     int nodePointer; //pointer to own node
};

struct BTree
{
     struct BtreeNode *root; //pointer to root node of the tree
     FILE *file; //binary tree that will contain the info from the BTree
};

/**
 * This method is desgined to join to nodes when reorganizing the tree's order.
 * 
 * @param tree, which is a pointer to the BTree generated by the function createBTree()
 * @param left, pointer to one of the nodes to be merged.
 * @param right, pointer to the second of the nodes to be merged.
 * @param nodePointer pointer to the node whete both nodes will be united.
 */
int mergeT(BTree* tree, BtreeNode* left, BtreeNode* right, BtreeNode* nodePointer);

/**
 * This method splits a node/root inside the BTree in case it has reach its maximum capacity.
 * 
 * @param tree, which is a pointer to the BTree generated by the function createBTree()
 * @param node, which is a pointer to the node that might be splitted in case it has no space left
 * for more values.
 */
int split(BTree* tree, BtreeNode* node);

/**
 * This method introduces a value, with its respective key, into the Btree.
 * 
 * @param tree, which is a pointer to the BTree generated by the function createBTree()
 * @param nodeKey, which represents the key of the element to be introduced in the tree
 */
int insertNodeb(BTree* tree, int nodeKey);

/**
 * Creates a file where the data of the BTree will be introduced (binary) and
 * also allocates the neccesary memory for the actual structure of the tree.
 * 
 * @param file, which is the name of the file to be produced by the BTree.
 */
BTree* createBTree(char* file);

/**
 * This method deletes a element of a node (BTree) given an specific node key
 * 
 * @param tree, which is a pointer to the BTree generated by the function createBTree()
 * @param nodeKey, which represents the key of the element to be eliminated from the tree
 */
int deleteT(BTree* tree, int nodeKey);


/**
 * This method is used for the actual search of certian elements inside
 * any BTree generated by this program (given an specific key).
 * 
 * @param tree, which is a pointer to the BTree generated by the function createBTree()
 * @param nodeKey, which represents the key of the element to be searched in the tree
 */
BtreeNode* search(BTree* tree, int nodeKey);